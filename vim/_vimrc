set nocompatible
set rtp^=~/.vim
set rtp^=~/.vim/bundle/vim-pathogen
execute pathogen#infect()

" basic settings
filetype plugin indent on
set autochdir
set wildmenu
set autowrite
set autoread
set hidden
set bs=2
set tag+=./tags;/

" backup settings
set nobackup
set nowritebackup
set noswapfile

" indent settings
set autoindent
set cindent
set smartindent

" ui settings
set cursorline
set guifont=Source\ Code\ Pro:h14
set showmatch
set list
set listchars=tab:>-,trail:-
set guioptions=agt
set number
syntax enable
if has("syntax")
	syntax on
endif
"set background=dark
"colorscheme solarized
"let g:molokai_original = 1
colorscheme molokai
set clipboard+=unnamed

"tab settings
set noexpandtab
set tabstop=4
set shiftwidth=4
au FileType go setl ts=8 sw=8
au FileType markdown setl guifont=Menlo\ Regular:h14

"encoding
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1

" cursor settings
if has('mac')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

set shell=/usr/local/bin/zsh
let mapleader = ','
au BufNewFile,BufRead *.yaml,*.yml so ~/.vim/yaml.vim
au BufNewFile,BufRead *zshrc set filetype=zsh

fu! DoFormat()
	if &ft=="css"
		:normal mz
		execute "silent %!js-beautify --type css --config ~/.cssconf -f"
		:normal `z
	elseif &ft=="html"
		:normal mz
		execute "silent %!js-beautify --type html --config ~/.htmlconf -f"
		:normal `z
	elseif &ft=~'javascript.*'
		:normal mz
		execute "silent %!js-beautify --type js --config ~/.jsconf -f"
		:normal `z
	else
		:normal gg=G``
	endif
endfu

au BufWritePre * :call DoFormat()

" ag settings
let g:ag_working_path_mode="r"

" diff settings
set diffopt+=iwhite
if &diff
	colorscheme sol-term
endif
au FilterWritePre * if &diff | colorscheme sol-term | endif
autocmd BufNewFile,BufWrite,BufRead Podfile setlocal filetype=podfile syntax=ruby

"key mapping
nmap <CR> o<ESC>
"nmap <Leader>. :SyntasticCheck<CR>
nnoremap <silent> <Leader>bd :Bclose<CR>
nmap <Leader>, <C-w>h
if has("gui_macvim")
	function! MapBoth(keys, rhs)
		execute 'nmap' a:keys a:rhs
		execute 'imap' a:keys '<ESC>' . a:rhs
	endfunction
	" Switch to specific tab numbers with Command-number
	call MapBoth('<D-1>', ':tabn 1 <CR>')
	call MapBoth('<D-2>', ':tabn 2 <CR>')
	call MapBoth('<D-3>', ':tabn 3 <CR>')
	call MapBoth('<D-4>', ':tabn 4 <CR>')
	call MapBoth('<D-5>', ':tabn 5 <CR>')
	call MapBoth('<D-6>', ':tabn 6 <CR>')
	call MapBoth('<D-7>', ':tabn 7 <CR>')
	call MapBoth('<D-8>', ':tabn 8 <CR>')
	call MapBoth('<D-9>', ':tabn 9 <CR>')
	call MapBoth('<D-0>', ':tablast <CR>')
endif

"ctrlp
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

"NERDTree
map <C-n> :NERDTreeToggle<CR>
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"neocomplete
set completeopt-=preview
let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_auto_close_preview = 1
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
	" For no inserting <CR> key.
	"return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
endif

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
""let g:syntastic_auto_jump = 2
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_filetype_map = { "javascript.jsx": "javascript" }
let g:syntastic_javascript_checkers = ['eslint']
nnoremap <silent> <F5> :SyntasticCheck<CR>
let g:syntastic_mode_map = { 'mode': 'passive', 'passive_filetypes': [] }


function! <SID>LocationPrevious()
	try
		lprev
	catch /^Vim\%((\a\+)\)\=:E553/
		llast
	endtry
endfunction

function! <SID>LocationNext()
	try
		lnext
	catch /^Vim\%((\a\+)\)\=:E553/
		lfirst
	endtry
endfunction

nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
nmap <silent> e[  <Plug>LocationPrevious
nmap <silent> e]  <Plug>LocationNext

"vim-go

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>d <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go nmap <leader>f <Plug>(go-fmt)

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_fail_silently = 1
let g:go_def_mode = 'godef'

"vim-markdown
let vim_markdown_preview_toggle=1
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Google Chrome'
let vim_markdown_preview_github=1
