"--------------------------------------------------------------------------------
" basic settings

"" pathogen & runtimepath
set nocompatible
set rtp^=~/.vim
set rtp^=~/.vim/bundle/vim-pathogen
execute pathogen#infect()

"" common
set history=700
set so=7
set shell=/usr/local/bin/zsh
let mapleader = ','
filetype plugin indent on
set autochdir
set wildmenu
set wildignore=*.o,*~,*.pyc
set ruler
set cmdheight=2
set autowrite
set autoread
set hidden
set bs=2
set tag+=./tags;/
set clipboard+=unnamed
set ignorecase
set smartcase
set showmatch
set lazyredraw
set magic
set noerrorbells
set novisualbell
set t_vb=
set tm=500

"" encoding
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1

"" backup
set nobackup
set nowritebackup
set noswapfile

"" indent
set autoindent
set cindent
set smartindent
set wrap

"" gui
set cursorline
set guifont=Source\ Code\ Pro:h12
set list
set listchars=tab:>-,trail:-,eol:¬,extends:…,precedes:…
if has("gui_running")
	set guioptions=agt
	set guitablabel=%M\ %t
	set t_Co=256
endif
set number
syntax enable
if has("syntax")
	syntax on
endif
colorscheme molokai
set lbr
set tw=500
set laststatus=2
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

"" cursor
if has('mac')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

"" tab
set noexpandtab
set smarttab
set tabstop=4
set shiftwidth=4

"" filetype specific
au FileType go setl ts=8 sw=8
au FileType markdown setl guifont=Menlo\ Regular:h14
au BufNewFile,BufRead *.yaml,*.yml so ~/.vim/yaml.vim
au BufNewFile,BufRead *zshrc set filetype=zsh
au BufNewFile,BufWrite,BufRead Podfile setlocal filetype=podfile syntax=ruby

"" buffer
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
set viminfo^=%

"--------------------------------------------------------------------------------
" key mappings
nmap <CR> o<ESC>
nmap <leader>w :w!<cr>
nnoremap <silent> <Leader>bd :Bclose<CR>
map j gj
map k gk
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
if has("gui_macvim")
	function! MapBoth(keys, rhs)
		execute 'nmap' a:keys a:rhs
		execute 'imap' a:keys '<ESC>' . a:rhs
	endfunction
	" Switch to specific tab numbers with Command-number
	call MapBoth('<D-1>', ':tabn 1 <CR>')
	call MapBoth('<D-2>', ':tabn 2 <CR>')
	call MapBoth('<D-3>', ':tabn 3 <CR>')
	call MapBoth('<D-4>', ':tabn 4 <CR>')
	call MapBoth('<D-5>', ':tabn 5 <CR>')
	call MapBoth('<D-6>', ':tabn 6 <CR>')
	call MapBoth('<D-7>', ':tabn 7 <CR>')
	call MapBoth('<D-8>', ':tabn 8 <CR>')
	call MapBoth('<D-9>', ':tabn 9 <CR>')
	call MapBoth('<D-0>', ':tablast <CR>')
endif

"--------------------------------------------------------------------------------
" plugins settings

"" ag
if &rtp =~? 'ag'
let g:ag_working_path_mode="r"
endif

"" ctrlp
if &rtp =~? 'ctrlp'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
endif

"" NERDTree
if &rtp =~? 'nerdtree'
map <C-n> :NERDTreeToggle<CR>
endif

"" neocomplete
if &rtp =~? 'neocomplete'
set completeopt-=preview
let g:neocomplete#enable_at_startup = 1
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
endif
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
au FileType css setlocal omnifunc=csscomplete#CompleteCSS
au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
au FileType python setlocal omnifunc=pythoncomplete#Complete
au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
endif

"" syntastic
if &rtp =~? 'syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_filetype_map = { "javascript.jsx": "javascript" }
let g:syntastic_javascript_checkers = ['eslint']
nnoremap <silent> <F5> :SyntasticCheck<CR>
let g:syntastic_mode_map = { 'mode': 'passive', 'passive_filetypes': [] }
function! <SID>LocationPrevious()
	try
		lprev
	catch /^Vim\%((\a\+)\)\=:E553/
		llast
	endtry
endfunction
function! <SID>LocationNext()
	try
		lnext
	catch /^Vim\%((\a\+)\)\=:E553/
		lfirst
	endtry
endfunction
nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
nmap <silent> e[  <Plug>LocationPrevious
nmap <silent> e]  <Plug>LocationNext
endif

""vim-go
if &rtp =~? 'vim-go'
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_fail_silently = 1
let g:go_def_mode = 'godef'
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>d <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go nmap <leader>f <Plug>(go-fmt)
endif

"" vim-markdown
if &rtp =~? 'vim-markdown'
let vim_markdown_preview_toggle=1
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Google Chrome'
let vim_markdown_preview_github=1
let vim_markdown_preview_temp_file=1
endif

"" vim-jsbeautify
if &rtp =~? 'vim-jsbeautify'
autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <c-f> :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>
endif

"--------------------------------------------------------------------------------
" Helper functions
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction
